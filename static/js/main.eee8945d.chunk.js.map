{"version":3,"sources":["components/Layout/Header/Header.js","components/Layout/Footer/Footer.js","components/Layout/styles.js","components/Layout/index.js","services/api.js","components/Card/styles.js","components/Card/index.js","components/Map/styles.js","components/Map/index.js","pages/home/HomePage.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","Footer","href","Container","styled","div","Main","props","children","getWeatherInfo","a","axios","get","headers","then","response","status","data","catch","error","Temperature","p","Card","state","loading","weather","currently","time","temperature","icon","daily","marks","marksDetails","markSelected","componentDidMount","setState","handleMarks","daysMarks","markArray","forEach","item","index","id","label","_formatDate","substring","toUpperCase","push","minTemp","_fahrenheitToCelcius","temperatureMin","minTempTime","temperatureMinTime","maxTemp","temperatureMax","maxTempTime","temperatureMaxTime","sunrise","sunriseTime","sunset","sunsetTime","length","Object","assign","temp","toFixed","date","format","moment","tz","_milesToKilometer","speed","handleSlideChange","value","selectedArray","selectedItem","find","this","windSpeed","precipProbability","defaults","color","size","animate","dateTime","min","step","onChange","included","defaultValue","renderDetails","Component","MapWrapper","API_TOKEN","viewport","latitude","longitude","zoom","bearing","pitch","width","containerWidth","height","containerHeight","console","log","mapStyle","mapboxApiAccessToken","onViewportChange","Wrapper","Dimensions","Map","HoemPage","info","result","render","Layout","Boolean","window","location","hostname","match","ReactDOM","HomePage","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eee8945d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => (\n  <header>\n    <nav className=\"navbar is-success\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n      </div>\n    </nav>\n  </header>\n)\n\nexport default Header","import React from 'react'\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <div className=\"content has-text-centered\">\n      <p>\n        Developed by: <a href=\"https://lucassenarj.github.io/site/\">Lucas Sena</a> using <a href=\"https://bulma.io/\">Bulma</a>\n      </p>\n    </div>\n  </footer>\n)\n\nexport default Footer","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n  align-content: space-around;\n`;\n\nexport const Main = styled.div`\n  flex: 1;\n  height: 100%;\n  margin: 5% 0;\n`;\n","import React from 'react'\nimport Header from './Header/Header'\nimport Footer from './Footer/Footer'\nimport { Container, Main } from './styles'\n\nexport default (props) => (\n  <Container>\n    <Header />\n    <Main>\n      {props.children}\n    </Main>\n    <Footer />\n  </Container>\n)","import axios from 'axios'\n\nconst path = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/ace1850ec41cb58a4bc938b4c440d58d'\n\nconst getWeatherInfo = async () => {\n  return await axios.get(`${path}/48.7151643,10.1312459`, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*'\n    }\n  })\n  .then(response => {\n    return {\n      status: true,\n      response: response.data\n    };\n  }).catch((error) => {\n    return {\n      status: false,\n      error\n    };\n  });\n}\n\nexport {\n  getWeatherInfo\n}","import styled from 'styled-components'\n\nexport const Temperature = styled.p`\n  font-size: 3.75rem !important;\n  font-weight: 300;\n  line-height: 3.75rem;\n  letter-spacing: -0.0083333333em !important;\n  font-family: \"Roboto\", sans-serif !important;\n`;\n","import React, { Component } from 'react'\nimport { Temperature } from './styles'\nimport 'rc-slider/assets/index.css'\nimport Slider from 'rc-slider'\nimport moment from 'moment-timezone'\nimport PropTypes from 'prop-types'\nimport ReactAnimatedWeather from 'react-animated-weather'\n\nclass Card extends Component {\n\n  static propTypes = {\n    weather: PropTypes.shape({\n      currently: PropTypes.shape({\n        time: PropTypes.number,\n        temperature: PropTypes.number,\n        icon: PropTypes.string\n      }).isRequired,\n      daily: PropTypes.shape({\n        data: PropTypes.arrayOf(\n          PropTypes.shape({\n            temperatureMin: PropTypes.number,\n            temperatureMinTime: PropTypes.number,\n            temperatureMax: PropTypes.number,\n            temperatureMaxTime: PropTypes.number,\n            sunriseTime: PropTypes.number,\n            sunsetTime: PropTypes.number\n          })\n        ).isRequired\n      }).isRequired\n    })\n  }\n\n  state = {\n    loading: true,\n    weather: {\n      currently: {\n        time: '',\n        temperature: 0,\n        icon: 'WIND'\n      },\n      daily: {\n        data: []\n      }\n    },\n    marks: {},\n    marksDetails: [],\n    markSelected: {}\n  }\n\n  componentDidMount = async () => {\n    if(this.props.weather) {\n      await this.setState({ loading: false, weather: this.props.weather })\n      this.handleMarks()\n    }\n  }\n  \n  handleMarks = () => {\n    let daysMarks = []\n    let marksDetails = []\n    const markArray = this.state.weather.daily.data\n    markArray.forEach((item, index) => {\n      if(index <= 5) {\n        const id = index*20\n        const label = this._formatDate(item.time, 'dddd').substring(0, 3).toUpperCase()\n        daysMarks[id] = label\n        marksDetails.push({ \n          id, \n          minTemp: this._fahrenheitToCelcius(item.temperatureMin),\n          minTempTime: this._formatDate(item.temperatureMinTime, 'LT'),\n          maxTemp: this._fahrenheitToCelcius(item.temperatureMax),\n          maxTempTime: this._formatDate(item.temperatureMaxTime, 'LT'),\n          sunrise: this._formatDate(item.sunriseTime, 'LT'),\n          sunset: this._formatDate(item.sunsetTime, 'LT')\n        })\n      }\n    });\n    if(markArray.length >= 1) {\n      this.setState({ marks: Object.assign({}, daysMarks), marksDetails, markSelected: marksDetails[0] })\n    }\n  }\n\n  _fahrenheitToCelcius = temp => {\n    return `${((temp - 32) * 5 / 9).toFixed(0)}°C`\n  }\n\n  _formatDate = (date, format = 'llll') => {\n    return moment(date * 1000).tz('Europe/Berlin').format(format)\n  }\n\n  _milesToKilometer = speed => {\n    return `${(speed/0.62137).toFixed(2)} km/h`\n  }\n  \n  handleSlideChange = async value => {\n    const selectedArray = await this.state.marksDetails\n    const selectedItem = selectedArray.find(item => {\n      return item.id === value\n    })\n\n    this.setState({ markSelected: selectedItem })\n  }\n\n  renderDetails() {\n    const { markSelected } = this.state\n    return (\n      <div className=\"columns is-mobile has-text-centered\">\n        <div className=\"column\">\n          <p><i className=\"fa fa-temperature-low fa-lg\"></i> {markSelected.minTemp}</p>\n          <h6>{markSelected.minTempTime}</h6>\n        </div>\n        <div className=\"column\">\n          <p><i className=\"fa fa-temperature-high fa-lg\"></i> {markSelected.maxTemp}</p>\n          <h6>{markSelected.maxTempTime}</h6>\n        </div>\n        <div className=\"column\">\n          <p><i className=\"fa fa-sun fa-lg\" /></p>\n          <h6>{markSelected.sunrise}</h6>\n        </div>\n        <div className=\"column\">\n          <p><i className=\"fa fa-moon fa-lg\" /></p>\n          <h6>{markSelected.sunset}</h6>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const { currently } = this.state.weather\n    const time = this._formatDate(currently.time)\n    const temperature = this._fahrenheitToCelcius(currently.temperature)\n    const windSpeed = this._milesToKilometer(currently.windSpeed)\n    const precipProbability = (currently.precipProbability * 100).toFixed(0)\n    const icon = `${currently.icon}`\n    const place = 'Heidenheim, Germany'\n    const defaults = {\n      icon: icon.toUpperCase(),\n      color: 'goldenrod',\n      size: 64,\n      animate: true\n    }\n    return (\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <p className=\"title\">\n            {place}\n          </p>\n          <p className=\"subtitle\">\n            <time dateTime={time}>{time}</time>\n          </p>\n          <div className=\"columns is-mobile\">\n            <div className=\"column is-one-third\">\n              <Temperature>\n                {temperature}\n              </Temperature>\n            </div>\n            <div className=\"column\">\n              <ReactAnimatedWeather\n                icon={defaults.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n            </div>\n          </div>\n          <div className=\"columns is-mobile\">\n            <div className=\"column\">\n              <div className=\"media\">\n                <div className=\"media-left\">\n                  <ReactAnimatedWeather\n                    icon='WIND'\n                    color='grey'\n                    size={32}\n                    animate={defaults.animate}\n                  />\n                </div>\n                <div className=\"media-content\">\n                  <p className=\"subtitle is-4\">{windSpeed}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"column\">\n              <div className=\"media\">\n                <div className=\"media-left\">\n                  <ReactAnimatedWeather\n                    icon='RAIN'\n                    color='grey'\n                    size={32}\n                    animate={defaults.animate}\n                  />\n                </div>\n                <div className=\"media-content\">\n                  <p className=\"subtitle is-4\">{`${precipProbability}%`}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"columns is-mobile\">\n            <div className=\"column\">\n              <Slider min={0} marks={this.state.marks} step={20} onChange={this.handleSlideChange} included={false} defaultValue={0} />\n            </div>\n          </div>\n          {this.state.markSelected && this.renderDetails()}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50vh;\n`;","import React, { Component, Fragment } from 'react'\nimport MapGL, { Marker } from 'react-map-gl'\nimport Dimensions from 'react-dimensions'\nimport PropTypes from 'prop-types'\nimport { Container } from './styles'\n\nclass MapWrapper extends Component {\n  API_TOKEN = 'pk.eyJ1IjoibHVjYXNzZW5hcmoiLCJhIjoiY2szYWZzdWg4MGJ0eTNicWgxa2pibzF5cSJ9.9CYaS2GvgVKB_uC1wQhFOw';\n\n  static propTypes = {\n    containerWidth: PropTypes.number.isRequired,\n    containerHeight: PropTypes.number.isRequired\n  }\n\n  state = {\n    viewport: {\n      latitude: 48.6742746129279,\n      longitude: 10.173079459233461,\n      zoom: 10.424041270260442,\n      bearing: 0,\n      pitch: 0\n    }\n  }\n\n  render() {\n    const { containerWidth: width, containerHeight: height } = this.props;\n    const { viewport } = this.state;\n    console.log(width)\n    console.log(height)\n\n    return (\n      <Fragment>\n        <MapGL \n          width={width} \n          height={height} \n          {...this.state.viewport}\n          mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n          mapboxApiAccessToken={this.API_TOKEN}\n          onViewportChange={viewport => this.setState({ viewport })}\n        >\n          <Marker longitude={viewport.longitude} latitude={viewport.latitude} />\n        </MapGL>\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nconst Wrapper = Dimensions()(MapWrapper)\n\nconst Map = () => (\n  <Container>\n    <Wrapper />\n  </Container>\n)\n\nexport default Map;","import React, { Component } from 'react'\nimport Layout from './../../components/Layout'\nimport { getWeatherInfo } from './../../services/api'\nimport Card from './../../components/Card'\nimport Map from './../../components/Map'\n\nclass HoemPage extends Component {\n  state = {\n    loading: false,\n    info: null\n  }\n  componentDidMount = async () => {\n    this.setState({ loading: true })\n    const result = await getWeatherInfo()\n    if(result.status) {\n      this.setState({ info: result.response, loading: false })\n      return\n    }\n    this.setState({ loading: false })\n  }\n\n  render = () => {\n    return (\n      <Layout>\n        <section>\n          <div className=\"container\">\n            {!this.state.loading && (\n              <div className=\"columns is-desktop is-vcentered\">\n                <div className=\"column is-one-third\">\n                  <Card weather={this.state.info} />\n                </div>\n                <div className=\"column is-two-thirds\">\n                  <Map />\n                </div>\n              </div>\n            ) }\n          </div>\n        </section>\n      </Layout>\n\n    )\n  }\n}\n\nexport default HoemPage","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport HomePage from './pages/home/HomePage'\nimport * as serviceWorker from './serviceWorker'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}